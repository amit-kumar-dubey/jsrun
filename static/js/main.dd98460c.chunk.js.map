{"version":3,"sources":["util/auth.js","AppContainer/User/User.js","GistListContainer/Gist/Gist.js","GistListContainer/GistListContainer.js","AppContainer/App/App.js","EditorContainer/Editor/Editor.js","EditorContainer/EditorContainer.js","AppContainer/AppContainer.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","GITHUB_USER","getUser","a","githubUserStr","localStorage","getItem","JSON","parse","code","window","location","href","match","fetch","response","json","token","access_token","headers","Authorization","response2","status","Error","Object","user","assign","setItem","stringify","User","memo","useContext","Image","src","avatar_url","style","height","Anchor","label","icon","Github","Gist","gist","selectGist","Box","pad","key","id","Text","description","keys","files","values","filter","file","language","map","index","Button","margin","filename","hoverIndicator","onClick","GistListContainer","useState","gists","setGists","useEffect","fetchGists","g","length","some","f","THEME","freeze","global","font","family","size","App","showLeftNav","children","rightIcon","leftNav","mainContent","Grommet","full","theme","Grid","fill","rows","columns","areas","name","start","end","gridArea","direction","align","justify","horizontal","vertical","background","width","animation","type","duration","Editor","props","iframe","undefined","state","content","run","bind","updateCode","ev","this","setState","contentWindow","eval","nextProps","nextContext","externalContent","mode","onChange","value","focus","editorProps","$blockScrolling","commands","bindKey","win","mac","exec","primary","Run","title","display","ref","r","Component","EditorContainer","selectedGist","setContent","fetchGistContent","AppContainer","setSelectedGist","setUser","fetchLoggedInUser","Provider","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd98460c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AuthContext = React.createContext(null);\n\nexport const GITHUB_USER = \"github-user\";\n\nexport async function getUser() {\n  const githubUserStr = localStorage.getItem(GITHUB_USER);\n  if (githubUserStr) {\n    return JSON.parse(githubUserStr);\n  } else {\n    const code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n\n    if (!code) {\n      return null;\n    }\n    try {\n      const response = await fetch(\n        \"https://pqsq24y7vb.execute-api.us-east-1.amazonaws.com/github/authenticate?code=\" +\n          code\n      );\n      const { access_token: token } = await response.json();\n      const response2 = await fetch(\"https://api.github.com/user\", {\n        headers: { Authorization: `token ${token}` }\n      });\n      if (response2.status > 400) {\n        throw new Error(\"Unauthorized\");\n      }\n      const user = Object.assign(await response2.json(), { token });\n      localStorage.setItem(GITHUB_USER, JSON.stringify(Object.assign(user)));\n\n      return user;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","import React, { useContext } from \"react\";\nimport { Anchor, Image } from \"grommet\";\nimport { Github } from \"grommet-icons\";\nimport { AuthContext } from \"util/auth\";\n\nconst URL =\n  \"https://github.com/login/oauth/authorize?client_id=d35e67867e141005ae25&\" +\n  \"scope=gist&\" +\n  \"redirect_uri=https://pvamshi.github.io/runjs\";\n\nexport const User = React.memo(function User() {\n  const user = useContext(AuthContext);\n  return user ? (\n    <Image src={user.avatar_url} style={{ height: \"40px\" }} />\n  ) : (\n    <Anchor href={URL} label={\"Log in \"} icon={<Github />} />\n  );\n});\n","import React from \"react\";\nimport { Box, Button, Text } from \"grommet/es6\";\n\nexport const Gist = React.memo(function Gist({ gist, selectGist }) {\n  return (\n    <Box pad=\"small\" key={gist.id}>\n      <Text>{gist.description || Object.keys(gist.files)[0]}</Text>\n\n      {Object.values(gist.files)\n        .filter(file => file.language === \"JavaScript\")\n        .map(file => Object.assign({}, file, { id: gist.id }))\n        .map((file, index) => (\n          <Button\n            margin=\"small\"\n            key={file.filename + index}\n            hoverIndicator\n            onClick={() => selectGist(file)}\n          >\n            <Text>{file.filename}</Text>\n          </Button>\n        ))}\n    </Box>\n  );\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"util/auth\";\nimport { Gist } from \"./Gist\";\n\nexport const GistListContainer = React.memo(function GistListContainer({selectGist}) {\n  const [gists, setGists] = useState([]);\n  const { token } = useContext(AuthContext) || {};\n  useEffect(() => {\n    async function fetchGists() {\n      const response = await fetch(\"https://api.github.com/gists\", {\n        headers: { Authorization: `token ${token}` }\n      });\n      setGists(await response.json());\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchGists();\n  }, [token]);\n  return gists\n    .filter(\n      g =>\n        Object.keys(g.files).length > 0 &&\n        Object.values(g.files).some(f => f.language === \"JavaScript\")\n    )\n    .map(gist => <Gist key={gist.id} gist={gist} selectGist={selectGist} />);\n});\n","import React from \"react\";\nimport {Box, Button, Grid, Grommet, Text} from \"grommet/es6\";\n\nconst THEME = Object.freeze({\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"14px\",\n      height: \"14px\"\n    }\n  }\n});\nexport const App = React.memo(function HomeLayout({\n  showLeftNav,\n  children: [rightIcon, leftNav, mainContent]\n}) {\n  return (\n    <Grommet full theme={THEME}>\n      <Grid\n        fill\n        rows={[\"auto\", \"flex\"]}\n        columns={[\"auto\", \"flex\"]}\n        areas={[\n          { name: \"header\", start: [0, 0], end: [1, 0] },\n          { name: \"sidebar\", start: [0, 1], end: [0, 1] },\n          { name: \"main\", start: [1, 1], end: [1, 1] }\n        ]}\n      >\n        <Box\n          gridArea=\"header\"\n          direction=\"row\"\n          align=\"center\"\n          justify=\"between\"\n          pad={{ horizontal: \"medium\", vertical: \"small\" }}\n          background=\"brand\"\n        >\n          <Button>\n            <Text size=\"large\">Run JS</Text>\n          </Button>\n          {rightIcon}\n        </Box>\n        {showLeftNav && (\n          <Box\n            gridArea=\"sidebar\"\n            background=\"light-6\"\n            width=\"small\"\n            animation={[\n              { type: \"fadeIn\", duration: 300 },\n              { type: \"slideRight\", size: \"xlarge\", duration: 150 }\n            ]}\n          >\n            {leftNav}\n          </Box>\n        )}\n        <Box gridArea=\"main\">{mainContent}</Box>\n      </Grid>\n    </Grommet>\n  );\n});\n","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"brace/mode/javascript\";\nimport \"brace/theme/tomorrow\";\nimport { Button } from \"grommet\";\nimport { Run } from \"grommet-icons\";\n\n/**\n * TODO: Replace this with functional component commented below. With the current commented code there is an issue when\n * cmd+Enter is run after updating the content\n */\nexport class Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.iframe = undefined;\n    this.state = {\n      content: `// Open dev tools to see the output\t\n console.log('Hello World');`\n    };\n    this.run = this.run.bind(this);\n    this.updateCode = this.updateCode.bind(this);\n  }\n  updateCode(ev) {\n    this.setState({ content: ev });\n  }\n  run() {\n    const contentDoc = this.iframe.contentWindow;\n    contentDoc.eval(this.state.content);\n  }\n\n  async componentWillUpdate(nextProps, nextContext) {\n    const externalContent = nextProps.externalContent;\n    // const selectedGist = nextProps.selectedGist;\n    if (externalContent && externalContent !== this.state.content) {\n      this.setState({ content: externalContent });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <AceEditor\n          mode=\"javascript\"\n          theme=\"tomorrow\"\n          onChange={this.updateCode}\n          name=\"js-editor\"\n          value={this.state.content}\n          focus={true}\n          editorProps={{ $blockScrolling: true }}\n          width={\"100%\"}\n          commands={[\n            {\n              // commands is array of key bindings.\n              name: \"Execute\", //name for the key binding.\n              bindKey: { win: \"Ctrl-Enter\", mac: \"Command-Enter\" }, //key combination used for the command.\n              exec: this.run //function to execute when keys are pressed.\n            }\n          ]}\n        />\n        <Button onClick={this.run} primary icon={<Run />} label={\"Run\"} />\n        <iframe\n          title={\"dummy\"}\n          style={{ display: \"none\" }}\n          ref={r => (this.iframe = r)}\n        >\n          {\" \"}\n        </iframe>\n      </div>\n    );\n  }\n}\n//\n// export const Editor = React.memo(function Editor({ externalContent }) {\n//   const [content, setContent] = useState(\n//     `// Open dev tools to see the output\n// console.log('Hello World');`\n//   );\n//   const [iframe, setIframe] = useState(null);\n//   useEffect(() => {\n//     if (externalContent) {\n//       setContent(externalContent);\n//     }\n//   }, [externalContent]);\n//   const run = () => {\n//     const contentDoc = iframe.contentWindow;\n//     contentDoc.eval(content);\n//   };\n//   return (\n//     <div>\n//       <iframe\n//         title={\"dummy\"}\n//         style={{ display: \"none\" }}\n//         ref={r => setIframe(r)}\n//       >\n//         {\" \"}\n//       </iframe>\n//       {iframe && (\n//         <AceEditor\n//           mode=\"javascript\"\n//           theme=\"tomorrow\"\n//           onChange={content => setContent(content)}\n//           name=\"js-editor\"\n//           value={content}\n//           focus={true}\n//           editorProps={{ $blockScrolling: true }}\n//           width={\"100%\"}\n//           commands={[\n//             {\n//               // commands is array of key bindings.\n//               name: \"Execute\", //name for the key binding.\n//               bindKey: { win: \"Ctrl-Enter\", mac: \"Command-Enter\" }, //key combination used for the command.\n//               exec: () => run() //function to execute when keys are pressed.\n//             }\n//           ]}\n//         />\n//       )}\n//       <Button onClick={() => run()} primary icon={<Run />} label={\"Run\"} />\n//     </div>\n//   );\n// });\n//\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"../util/auth\";\nimport { Editor } from \"./Editor\";\n\nexport const EditorContainer = React.memo(function EditorContainer({\n  selectedGist\n}) {\n  const { token } = useContext(AuthContext) || {};\n  const [ content, setContent ] = useState(null);\n  useEffect(() => {\n    async function fetchGistContent() {\n      if (selectedGist && selectedGist.id && token) {\n        try {\n          const response = await fetch(\n            \"https://api.github.com/gists/\" + selectedGist.id,\n            {\n              headers: { Authorization: `token ${token}` }\n            }\n          );\n          if (response.status > 400) {\n            throw new Error(\"Unauthorized\");\n          }\n          const gist = await response.json();\n          const file = gist.files[selectedGist.filename];\n          setContent(file.content);\n        } catch (e) {}\n      }\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchGistContent();\n  }, [selectedGist, token]);\n  return <Editor externalContent={content} />;\n});\n","import React, { useEffect, useState } from \"react\";\nimport { User } from \"./User\";\nimport { GistListContainer } from \"../GistListContainer\";\nimport { AuthContext, getUser } from \"../util/auth\";\nimport { App } from \"./App\";\nimport { EditorContainer } from \"../EditorContainer\";\n\nexport const AppContainer = React.memo(function AppContainer() {\n  const [selectedGist, setSelectedGist] = useState({});\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    async function fetchLoggedInUser() {\n      setUser(await getUser());\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchLoggedInUser();\n  }, []);\n  return (\n    <AuthContext.Provider value={user}>\n      <App showLeftNav={user && user.token}>\n        <User />\n        <GistListContainer selectGist={gist => setSelectedGist(gist)} />\n        <EditorContainer selectedGist={selectedGist} />\n      </App>\n    </AuthContext.Provider>\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { AppContainer } from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AppContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}